// This pipeline allows different lengths in global variables, TRIMR1 and TRIMR2,
// to be trimmed from forward (R1) and reverse (R2) reads in gzipped fastq files
// To change location of output, change global variable "WORKINGDIR"
// Requirements: fastx-toolkit v0.0.13 or higher

WORKINGDIR="NGS_Multi_Heal"
TRIMR1=args[0]
TRIMR2=args[1]

makeOutputDirectory = {
     from("*R1_001.cleaned.fastq.gz", "*R2_001.cleaned.fastq.gz"){
      
      exec """
              mkdir $input1.prefix; mv -v $input1 $input1.prefix; mv -v $input2 $input1.prefix; cd $input1.prefix;
              echo "fastx_trimmer: Forward reads trimmed $TRIMR1 and reverse reads trimmed $TRIMR2" > 'parameters.log'
           """
       }
     succeed "Forward reads file trimmed $TRIMR1 and reverse reads file trimmed $TRIMR2"    
            
     }

gunzipPair = {
   output.dir = "$WORKINGDIR"
   transform('.fastq.gz') to('.fastq'){
     exec "gunzip -c $input > $output"
       }
   }

fastxR1 = {
   output.dir = "$WORKINGDIR"
   from("*R1_001.fastq"){
     filter("cleaned"){
       exec "fastx_trimmer -Q33 -t $TRIMR1 -i $input -o $output; rm -v $input"
       }
   }
}

fastxR2 = {
   output.dir = "$WORKINGDIR"
   from("*R2_001.fastq"){
     filter("cleaned"){
       exec "fastx_trimmer -Q33 -t $TRIMR2 -i $input -o $output; rm -v $input"
     }
  }
}

addTrim1 = {
           output.dir = "$WORKINGDIR"
           transform('.fastx.fastq.gz') to ('.fastx'){
                 exec "mv -v $input $output.$TRIMR1.'fastq.gz'"
               }
             succeed "Forward reads file trimmed $TRIMR1 bases and saved to $output.dir"
             forward $input
            }

addTrim2 = {
           output.dir = "$WORKINGDIR"
           transform('.fastx.fastq.gz') to ('.fastx'){
              exec "mv -v $input $output.$TRIMR2.'fastq.gz'"
              }
            succeed "Reverse reads file trimmed $TRIMR2 bases and saved to $output.dir"
            forward $input
           }

gzipTrim = {
   output.dir = "$WORKINGDIR"
   transform('.fastq') to('.fastq.gz'){
      exec "gzip -c $input > $output; rm -v $input"
    }
 }


Bpipe.run {
   "_R%_" * [gunzipPair] + [fastxR1 + gzipTrim, fastxR2 + gzipTrim] + makeOutputDirectory
}


